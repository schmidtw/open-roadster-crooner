QUIET   ?= @

as           = avr32-as
cc           = avr32-gcc
nm           = avr32-nm
objcopy      = avr32-objcopy
jtag         = avr32program
dfu          = dfu-programmer
objs         = $(addprefix $(gen_dir)/,$(filter %.o,$(SOURCES:.c=.o) $(SOURCES:.S=.o)))
dependencies = $(objs:%.o=%.d)
sleepusb     = 1
empty_file   = .auto_gen_file
gen_dir      = objs
gen_file     = $(gen_dir)/$(empty_file)
fillout_dependency_file = $(BASE)/tools/make_empty_dependencies.pl
makefile_dependency = $(filter %Makefile.common %Makefile,$(MAKEFILE_LIST))

inc_dir = $(BASE)/bins/include
lib_dir = $(BASE)/bins/lib

startup_file = $(lib_dir)/crt0.o

lboard = $(shell echo $(BOARD) | tr "[:upper:]" "[:lower:]")
target_elf = $(TARGET).elf
target_hex = $(TARGET).hex
libraries = $(addsuffix -$(lboard),$(LIBRARIES))
last_goal = $(lastword $(MAKECMDGOALS))
local_newlib = $(addsuffix -$(lboard),newlib)

ifeq ($(BOARD),EVK1100)
arch = ucr1
chip = uc3a0512es
linkfile = at32uc3a0512es.x
# Flash memories: [{cfi|internal}@address,size]...
flash = internal@0x80000000,512Kb
# Clock source to use when programming: [{xtal|extclk|int}]
prog_clock = xtal
else
ifeq ($(BOARD),CROONER_1_0)
arch = ucr2
chip = uc3a1512
linkfile = at32uc3a1512.x
flash = internal@0x80000000,512Kb
prog_clock = xtal
else
ifeq ($(BOARD),CROONER_2_0)
arch = ucr2
chip = uc3a0512
linkfile = at32uc3a0512.x
flash = internal@0x80000000,512Kb
prog_clock = xtal
else
$(error "invalid board name")
endif
endif
endif

OPTIMIZATIONS ?= -O0

cflags = \
    -march=$(arch) \
    -mpart=$(chip) \
    -Wall \
    -ffunction-sections \
    -fdata-sections \
    -D__IEEE_BIG_ENDIAN \
    -fshort-enums \
    -DBOARD=$(BOARD) \
    $(CFLAGS)

ldflags = \
    -T$(BASE)/apps/make/$(linkfile) \
    -nostartfiles \
    $(lib_dir)/syscalls.o \
    -L$(lib_dir) \
    -Wl,--no-gc-sections \
    $(addprefix -l,$(local_newlib)) \
    -Wl,--gc-sections \

ifdef NANO_BUFFER
ldflags += -Wl,--defsym -Wl,__nano_buffer_size__=$(NANO_BUFFER)
endif

ifdef SRAM_CODEC_SIZE
ldflags += -Wl,--defsym -Wl,__sram_codec_size__=$(SRAM_CODEC_SIZE)
endif

ifdef SDRAM_CODEC_SIZE
ldflags += -Wl,--defsym -Wl,__sdram_codec_size__=$(SDRAM_CODEC_SIZE)
endif

ifdef STACK_SIZE
ldflags += -Wl,--defsym -Wl,__stack_size__=$(STACK_SIZE)
endif

includes = \
    -I/usr/avr32/include \
    -I$(inc_dir)

ifndef NOVERIFY
verify = -v
dfu_verify =
else
verify =
dfu_verify = --suppress-validation
endif

all :: $(target_hex)

ifneq "$(MAKECMDGOALS)" "clean"
  -include $(dependencies)
endif

$(target_hex) : $(target_elf)
	$(QUIET)$(objcopy) -O ihex $< $@

$(target_elf) : $(objs) $(addsuffix .a,$(addprefix $(lib_dir)/lib,$(libraries) $(local_newlib))) $(BASE)/apps/make/$(linkfile)
	$(QUIET)$(cc) $(cflags) $(ldflags) -o $@ $(objs) $(addprefix -l,$(libraries)) -lm $(startup_file)

$(gen_file) : $(MAKEFILE_LIST)
	$(QUIET)mkdir -p $(dir $@)
	$(QUIET)touch $@

$(gen_dir)/%.o : %.c $(gen_file) $(makefile_dependency)
	$(QUIET)$(cc) $(cflags) $(includes) -M -MT $@ -MF $(@:%.o=%.d) $<
	$(QUIET)perl $(fillout_dependency_file) $(@:%.o=%.d)
	$(QUIET)$(cc) $(cflags) $(OPTIMIZATIONS) -g -c $(includes) -o $@ $<

$(gen_dir)/%.o : %.S $(gen_file) 
	$(QUIET)$(as) -g -o $@ $<

library :
	$(QUIET)cd ../../library; make install

.PHONY: clean
clean ::
	$(QUIET)rm -f $(target_elf) $(target_hex)
	$(QUIET)rm -rf $(gen_dir)

################################################################################
#                          JTAG Programming / Commands                         #
################################################################################
simple_jtag_commands = jtag-halt jtag-cpuinfo jtag-chiperase jtag-reset jtag-secureflash jtag-run
.PHONY: $(simple_jtag_commands)
$(simple_jtag_commands) :
	@echo "Performing: $@"
	$(QUIET)$(jtag) $(subst jtag-,,$@)
ifneq ($(filter $(last_goal),$(simple_jtag_commands)),$(last_goal))
	$(QUIET)sleep $(sleepusb)
endif

.PHONY: jtag-program
jtag-program : jtag-halt $(target_elf)
	@echo "Performing: $@"
	$(QUIET)$(jtag) --part $(chip) program -f$(flash) -c$(prog_clock) -e $(verify) -R $(if $(findstring run,$(MAKECMDGOALS)),-r) $(target_elf)
ifneq ($(filter $(last_goal),program),$(last_goal))
	$(QUIET)sleep $(sleepusb)
endif

################################################################################
#                          DFU Programming / Commands                          #
################################################################################
.PHONY: erase
erase :
	@echo "Erasing..."
	$(QUIET)$(dfu) $(addprefix at32,$(chip)) erase $(dfu_verify)

.PHONY: flash
flash : $(target_hex) erase
	@echo "Flashing: $@"
	$(QUIET)$(dfu) $(addprefix at32,$(chip)) flash $(dfu_verify) $(target_hex)

.PHONY: run
run : $(target_hex)
	@echo "Starting..."
	$(QUIET)$(dfu) $(addprefix at32,$(chip)) reset
	$(QUIET)$(dfu) $(addprefix at32,$(chip)) reset



ifndef BOARD
$(error "BOARD must be defined.")
endif
ifndef TARGET
$(error "TARGET must be defined.")
endif
ifndef BASE
$(error "BASE must be defined.")
endif

cc      = avr32-gcc
ar      = avr32-ar
objs    = $(addprefix $(gen_dir)/,$(filter %.o,$(SOURCES:.c=.o) $(SOURCES:.S=.o)))
lists   = $(addprefix $(gen_dir)/,$(filter %.S,$(SOURCES:.c=.S)))
deps    = $(addprefix $(gen_dir)/,$(filter %.d,$(SOURCES:.c=.d) $(SOURCES:.S=.d)))
startup = $(addprefix $(gen_dir)/,$(filter %.o,$(STARTUP:.c=.o) $(STARTUP:.S=.o)))
bins_su = $(addprefix $(lib_dir)/,$(filter %.o,$(STARTUP:.c=.o) $(STARTUP:.S=.o)))
gen_dir      = objs
empty_file   = .auto_gen_file
gen_file     = $(gen_dir)/$(empty_file)
QUIET  ?= @
INCLUDE += -I/opt/avr32-include/

inc_dir = $(BASE)/bins/include/$(TARGET)
lib_dir = $(BASE)/bins/lib

lboard = $(shell echo $(BOARD) | tr "[:upper:]" "[:lower:]")
header_targets = $(addprefix $(inc_dir)/,$(HEADERS))
dirs_needed = $(sort $(dir $(HEADERS)))
lib_name = lib$(TARGET)-$(lboard).a
lib_temp_location = $(gen_dir)/$(lib_name)

fillout_dependency_file = $(BASE)/tools/make_empty_dependencies.pl
makefile_dependency = $(filter %Makefile.common %Makefile,$(MAKEFILE_LIST))

ifeq ($(BOARD),EVK1100)
chip = uc3a0512es
arch = ucr1
else ifeq ($(BOARD),CROONER_1_0)
chip = uc3a1512
arch = ucr2
else ifeq ($(BOARD),CROONER_2_0)
chip = uc3a0512
arch = ucr2
else
$(error "invalid board name")
endif

OPTIMIZATIONS ?= -O0

cflags = \
    -c \
    -march=$(arch) \
    -mpart=$(chip) \
    -Wall \
    -std=gnu99 \
    -pedantic \
    -fgnu89-inline \
    -g \
    $(OPTIMIZATIONS) \
    -ffunction-sections \
    -fdata-sections \
    -D__IEEE_BIG_ENDIAN \
    -fshort-enums \
    -DBOARD=$(BOARD)


arflags = \
    crs

.PHONY: all
all :: $(lib_temp_location) $(startup)

listings: all $(lists)

.PHONY: install
install :: $(lib_dir)/$(lib_name) $(header_targets) $(bins_su)

ifneq "$(MAKECMDGOALS)" "clean"
  -include $(deps)
endif
	
$(lib_dir)/$(lib_name) : $(lib_temp_location)
	$(QUIET)mkdir -p $(dir $@)
	$(QUIET)cp $< $(dir $@)

$(lib_temp_location) : $(objs) $(gen_file)
	$(QUIET)$(ar) $(arflags) $@ $(objs)

$(gen_file) :
	$(QUIET)mkdir -p $(dir $@)
	$(QUIET)touch $@

$(gen_dir)/%.S : %.c $(gen_file)
	$(QUIET)$(cc) $(cflags) $(CFLAGS) $(INCLUDE) -o $@ -S $<

$(gen_dir)/%.S : %.S $(gen_file)
	$(QUIET)cp $< $@

$(gen_dir)/%.o : %.c $(gen_file) $(makefile_dependency)
	$(QUIET)mkdir -p $(dir $@)
	$(QUIET)$(cc) $(cflags) $(CFLAGS) $(INCLUDE) -M -MT $@ -MF $(@:%.o=%.d) $<
	$(QUIET)perl $(fillout_dependency_file) $(@:%.o=%.d)
	$(QUIET)$(cc) $(cflags) $(CFLAGS) $(INCLUDE) -o $@ $<

$(gen_dir)/%.o : %.S $(gen_file) $(makefile_dependency)
	$(QUIET)mkdir -p $(dir $@)
	$(QUIET)$(cc) $(cflags) $(CFLAGS) $(INCLUDE) -M -MT $@ -MF $(@:%.o=%.d) $<
	$(QUIET)perl $(fillout_dependency_file) $(@:%.o=%.d)
	$(QUIET)$(cc) $(cflags) $(CFLAGS) $(INCLUDE) -o $@ $<

.PHONY: clean
clean ::
	$(QUIET)rm -rf $(gen_dir)

.PHONY: cleanall
cleanall :: clean
	$(QUIET)rm -rf $(inc_dir) $(addprefix $(lib_dir)/,$(lib_name))

.PHONY: docs
docs ::
	$(QUIET)doxygen $(DOC_FILE)
	
#function STARTUP_template destination of startup, object location of startup
define STARTUP_template
$(1) : $(2)
	$(QUIET)cp $(2) $(1)
endef

define INSTALL_template
$(inc_dir)/$(1) : $(1)
	$(QUIET)mkdir -p $(dir $(inc_dir)/$(1))
	$(QUIET)cp $(1) $(dir $(inc_dir)/$(1))
endef

$(foreach header,$(HEADERS),$(eval $(call INSTALL_template,$(header))))
$(foreach start,$(bins_su),$(eval $(call STARTUP_template,$(start),$(patsubst $(lib_dir)%,$(gen_dir)%,$(start)))))
